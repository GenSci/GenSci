######################################################################
# PRODUCTION.YML - Defining the container configuration we will
# utilize for the production level application.  The main difference
# between this and our local development "docker-compose.yml" file is
# that it relies upon the NGINX server while the dev version uses
# the Django development server.
######################################################################

version: '2.1'

services:
    # First we will define the container for our Django application
    django:
        restart: always
        build:
            context: ./django
            dockerfile: piDockerfile
        command: bash run_web.sh
        volumes:
            - ./django/:/code
            - /var/log/gunicorn
        depends_on:
            - postgres
        ports:
            - "9000:9000"
        expose:
            - "9000"
        env_file:
            - .env



    # Defining our NGINX Web Server container
    nginx:
        restart: always
        build:
            context: ./nginx
            dockerfile: piDockerfile
        depends_on:
            - django
        volumes_from:
            - container:django
        ports:
            - "80:80"

    # Defining our database server container.
    postgres:
        restart: always
        image: tobi312/rpi-postgresql:latest # Getting the most up-to-date and cool postgres server instance.
        volumes:
            # By loading the SQL scripts we have stored in our postgres directory into the docker-entrypoint-initdb.d directory, Docker will run then (in alphabetical order) when we first build the image.
            - ./postgres/:/docker-entrypoint-initdb.d/
            - pg-data:/var/lib/postgresql/data
        expose:
            - "5432"
        ports:
            - "5466:5432" # This allows us to examine our database server
                          # using tools like pgAdmin
    #
# # Defining our Redis container, which we will use for caching and
# # session storage.
# redis:
#     restart: always
#     image: redis:latest
#     expose:
#         - "6379"
#
# # Eventually I want to use rabbitmq for my distributed task queueing processes along with Celery.  So let's just make that available now.
# rabbitmq:
#     image: rabbitmq:latest
#     restart: always
#     hostname: rabbitmq
#     ports:
#       - "15673:15672"
volumes:
    pg-data: {}
